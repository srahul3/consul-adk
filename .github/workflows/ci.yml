name: CI/CD Pipeline

on:
  # Trigger on push to any branch
  push:
    branches: ['**']

  # Trigger on pull requests to any branch
  pull_request:
    branches: ['**']

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to test with'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      run_coverage:
        description: 'Generate coverage report'
        required: false
        default: true
        type: boolean

jobs:
  # =============================================================================
  # Code Quality and Linting Job
  # =============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install black flake8 mypy isort

      - name: Check code formatting with Black
        run: black --check client models server utilities tests

      - name: Check import sorting with isort
        run: isort --check-only client models server utilities tests

      - name: Lint with flake8
        run: |
          flake8 client models server utilities tests \
            --max-line-length=100 \
            --ignore=E203,W503 \
            --count \
            --statistics

      - name: Type checking with mypy
        run: mypy client models server utilities --ignore-missing-imports
        continue-on-error: true

  # =============================================================================
  # Test Matrix Job - Multiple Python versions and OS
  # =============================================================================
  test:
    name: Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.10'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-python${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pytest pytest-asyncio pytest-cov pytest-xdist

      - name: Run tests with pytest
        run: |
          pytest tests/ \
            -v \
            --junitxml=test-results-${{ matrix.os }}-py${{ matrix.python-version }}.xml \
            --cov=client --cov=models --cov=server --cov=utilities \
            --cov-report=xml:coverage-${{ matrix.os }}-py${{ matrix.python-version }}.xml \
            --cov-report=term

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: test-results-*.xml

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python-version }}
          path: coverage-*.xml

  # =============================================================================
  # Build and Package Job
  # =============================================================================
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-dist
          path: dist/

  # =============================================================================
  # Manual Test Job (only for workflow_dispatch)
  # =============================================================================
  manual-test:
    name: Manual Test (Python ${{ inputs.python_version }})
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pytest pytest-asyncio pytest-cov

      - name: Run specific tests
        run: |
          echo "Running tests with Python ${{ inputs.python_version }}"
          pytest tests/ -v --tb=short

      - name: Run coverage (if enabled)
        if: inputs.run_coverage
        run: |
          pytest tests/ --cov=client --cov=models --cov=server --cov=utilities \
            --cov-report=term --cov-report=html

      - name: Upload manual test coverage
        if: inputs.run_coverage
        uses: actions/upload-artifact@v3
        with:
          name: manual-test-coverage
          path: htmlcov/

  # =============================================================================
  # Status Check Job
  # =============================================================================
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: always()

    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed:"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Build: ${{ needs.build.result }}"
            exit 1
          fi
